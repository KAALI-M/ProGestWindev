#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : COL_GPU_Export
 major_version : 25
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x1bbcb5f0024679fa
 internal_properties : BQAAAAUAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     code : |1+
      // Constantes pour la sécurité des exports
      CONSTANT
      	nSECURITEEXPORT_DEFAUT 			= 0		// autorisation par défaut (= autorisé si aucun groupe parent, sinon comme le parent ou le moins restrictif des parents)
      	nSECURITEEXPORT_AUTORISE 		= 1		// autoriser les exports
      	nSECURITEEXPORT_MOTPASSESAUFHC 	= 2		// demander un mot de passe mais autoriser les copies d'écran
      	nSECURITEEXPORT_MOTPASSE 		= 3		// demander un mot de passe pour les exports
      	nSECURITEEXPORT_INTERDIT		= 4		// interdire les exports
      FIN
      
      gsCle est une chaine unicode = "XM^e~}G&x^GcQ""r@8kq"
     type : 720896
  procedures :
   -
     name : GPU_FaaSecuriteExport
     procedure_id : 1998672849527056017
     type_code : 15
     code : |1+
      // Fixe le niveau de sécurité pour les exports
      PROCEDURE GPU_FaaSecuriteExport(sLogin est une chaine unicode)
      
      HLitRecherchePremier(GPU_Utilisateur,Login,sLogin)
      SI PAS HTrouve(GPU_Utilisateur) alors
      	HLitRecherchePremier(GPU_UtilisateurWeb, Email, sLogin)
      	SI PAS HTrouve(GPU_UtilisateurWeb) ALORS
      		FAASécuritéExport(faaExportInterdit)
      		retour
      	fin
      	HLitRecherchePremier(GPU_Utilisateur,IDUtilisateur,GPU_UtilisateurWeb.IDUtilisateur)
      	SI PAS HTrouve(GPU_Utilisateur) ALORS
      		FAASécuritéExport(faaExportInterdit)
      		retour
      	fin
      FIN
      
      nSecuriteExport est un entier = GPU_nDonneSecuriteExport(GPU_Utilisateur.IDUtilisateur,Faux)
      sMotPasseExport est une chaine unicode = GPU_sDonneMotPasseExport()
      sMessage est une chaine unicode
      si sMotPasseExport <> "" ALORS
      	sMessage = GPU_MotPasseExport.MessageDialogue
      FIN
      
      selon nSecuriteExport
      	cas nSECURITEEXPORT_AUTORISE: 		FAASécuritéExport(faaExportLibre)
      	cas nSECURITEEXPORT_MOTPASSE: 		FAASécuritéExport(faaExportMdp, sMotPasseExport, sMessage)
      	cas nSECURITEEXPORT_MOTPASSESAUFHC:	FAASécuritéExport(faaExportMdpCopieEcranLibre, sMotPasseExport, sMessage)
      	AUTRE CAS: 							FAASécuritéExport(faaExportInterdit)
      FIN
      
     type : 458752
   -
     name : GPU_nDonneSecuriteExport
     procedure_id : 1998672849527121928
     type_code : 15
     code : |1+
      // Retourne le niveau de sécurité des exports pour un utilisateur ou un groupe d'utilisateurs
      PROCÉDURE GPU_nDonneSecuriteExport(nIdUtilisateurOuGroupeEstUnGroupe est un entier, bEstUnGroupe est un booléen, bDefaut est un booléen = vrai, bParent est un booléen = faux) : entier
      
      bDefaut = Vrai
      bufCle est un buffer
      
      // pour un groupe, il faut remonter les parents
      SI bEstUnGroupe ALORS
      
      	nIdGroupe est un entier = bParent ?  GPU_nRecupIdGroupeParent(nIdUtilisateurOuGroupeEstUnGroupe) sinon nIdUtilisateurOuGroupeEstUnGroupe
      	TANTQUE nIdGroupe <> 0
      		// recherche de l'option pour le groupe parent
      		bufCle = HConstruitValClé(GPU_SecuriteExport, IDUtilisateurOuGroupeEstUnGroupe, nIdGroupe, Vrai)
      		HLitRecherchePremier(GPU_SecuriteExport, IDUtilisateurOuGroupeEstUnGroupe, bufCle)
      		
      		// si l'option existe et n'est pas l'option par défaut
      		SI HTrouve(GPU_SecuriteExport) _ET_ GPU_SecuriteExport.Option <> nSECURITEEXPORT_DEFAUT ALORS
      			// si on est à la racine cela veut dire que l'option a été surchargée pour le groupe
      			SI nIdGroupe = nIdUtilisateurOuGroupeEstUnGroupe ALORS
      				bDefaut = Faux
      			FIN
      			RENVOYER GPU_SecuriteExport.Option
      		FIN
      		
      		// remonte au parent
      		nIdGroupe = GPU_nRecupIdGroupeParent(nIdGroupe)
      	FIN
      	
      	// si on est remonté tout en haut et qu'aucune restriction n'a été spécifié
      	// les exports sont autorisés pour ce groupe
      	RENVOYER nSECURITEEXPORT_AUTORISE
      
      // pour un utilisateur
      SINON
      
      	// si on ne recherche pas l'option du parent
      	si pas bParent alors
      		// recherche de l'option pour l'utilisateur
      		bufCle = HConstruitValClé(GPU_SecuriteExport, IDUtilisateurOuGroupeEstUnGroupe, nIdUtilisateurOuGroupeEstUnGroupe, Faux)
      		HLitRecherchePremier(GPU_SecuriteExport, IDUtilisateurOuGroupeEstUnGroupe, bufCle)
      		
      		// si l'option existe et n'est pas l'option par défaut
      		// cela veut dire que l'option a été surchargée pour l'utilisateur
      		SI HTrouve(GPU_SecuriteExport) _ET_ GPU_SecuriteExport.Option <> nSECURITEEXPORT_DEFAUT ALORS
      			bDefaut = Faux
      			RENVOYER GPU_SecuriteExport.Option
      		FIN
      	fin
      
      	nSecuriteExportGroupe est un entier
      	nSecuriteExport est un entier = nSECURITEEXPORT_DEFAUT
      
      	// parcours des groupes de l'utilisateur
      	HFiltre(GPU_Utilisateur_Groupe, IDUtilisateur, nIdUtilisateurOuGroupeEstUnGroupe, nIdUtilisateurOuGroupeEstUnGroupe)
      	POUR TOUT GPU_Utilisateur_Groupe SUR IDUtilisateur
      		// récupération du niveau de sécurité du groupe
      		nSecuriteExportGroupe = GPU_nDonneSecuriteExport(GPU_Utilisateur_Groupe.IDGroupe, Vrai)
      		
      		// remplace l'état par le moins restrictif ou l'état du premier groupe
      		SI nSecuriteExport = nSECURITEEXPORT_DEFAUT _OU_ nSecuriteExportGroupe < nSecuriteExport ALORS
      			nSecuriteExport = nSecuriteExportGroupe
      		FIN
      	FIN
      	HDésactiveFiltre(GPU_Utilisateur_Groupe)
      	
      	// renvoie l'état des groupes
      	RENVOYER (nSecuriteExport = nSECURITEEXPORT_DEFAUT ? nSECURITEEXPORT_AUTORISE sinon nSecuriteExport)
      FIN
      
     type : 458752
   -
     name : GPU_sDonneMotPasseExport
     procedure_id : 1998672849527187526
     type_code : 15
     code : |1+
      // Retourne le mot de passe pour les exports
      PROCEDURE GPU_sDonneMotPasseExport() : chaine unicode
      
      sMotPasse est une chaine unicode
      
      HLitPremier(GPU_MotPasseExport)
      SI PAS HEnDehors(GPU_MotPasseExport) ALORS
      	bufCle est un Buffer = HashChaîne(HA_MD5_128, gsCle)
      	sMotPasse = deCrypteStandard(GPU_MotPasseExport.MotPasse, bufCle, crypteAES128)
      FIN
      
      renvoyer sMotPasse
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : BQAAAAUAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x1bbcb5d10244ffd8
  internal_properties : BQAAAAUAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : BQAAAAUAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
